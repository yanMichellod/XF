#include <config/xf-config.h>

#if (USE_XF_RESOURCE_FACTORY_DEFAULT_IMPLEMENTATION != 0)

#include "resourcefactory-default.h"
#include "mutex-default.h"

//static
interface::XFResourceFactory * interface::XFResourceFactory::getInstance()
{
	return XFResourceFactoryDefault::getInstance();
}

static interface::XFResourceFactory * XFResourceFactoryDefault::getInstance(){
	///< Returns a pointer to the unique instance of the XF resource factory.
    static interface::XFResourceFactory* FactoryInstance = nullptr;
    if (FactoryInstance == nullptr){
        FactoryInstance = new XFResourceFactoryDefault();
    }
    return FactoryInstance;
}
virtual interface::XFDispatcher * XFResourceFactoryDefault::getDefaultDispatcher(){
	///< Returns the default dispatcher.
	static interface::XFDispatcher* disp
	return _mainDispatcher;
}
	virtual interface::XFDispatcher * XFResourceFactoryDefault::createDispatcher();                                           ///< Creates and returns a new dispatcher.
virtual interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
											   interface::XFThread::EntryMethodBody entryMethod,
											   const char * threadName,
											   const uint32_t stackSize = 0){
	///< Creates and returns a new thread.
	return nullptr;
}
virtual interface::XFMutex * XFResourceFactoryDefault::createMutex(){
	///< Creates and returns a new mutex.
	return new XFMutexDefault();
}
#endif // USE_XF_RESOURCE_FACTORY_DEFAULT_IMPLEMENTATION
