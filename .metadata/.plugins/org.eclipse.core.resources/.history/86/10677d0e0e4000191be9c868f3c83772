
#include <config/xf-config.h>

#if (USE_XF_TIMEOUTMANAGER_DEFAULT_IMPLEMENTATION != 0)

#include <assert.h>
#include <trace/trace.h>
#include "xf/interface/reactive.h"
#include "xf/interface/resourcefactory.h"
#include "port-functions.h"
#include "timeoutmanager-default.h"
#include <std::list>

using interface::XFResourceFactory;

/**
 * @brief XFTimeoutManagerDefault::XFTimeoutManagerDefault
 * Constructor of XFTimeoutManagerDefault create mutex
 */
XFTimeoutManagerDefault::XFTimeoutManagerDefault():_timeouts()
{
    _pMutex = interface::XFResourceFactory::getInstance()->createMutex();
}

/**
 * @brief XFTimeoutManagerDefault::~XFTimeoutManagerDefault
 * Destructor of XFTimeoutManagerDefault delete all object
 */
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
{
    delete _pMutex;
    for(auto t : _timeouts){
        if(t){
            delete t;
            t = nullptr;
        }
    }
}

/**
 * @brief interface::XFTimeoutManager::getInstance
 * @return An Instance of XFTimeoutmanager
 */
interface::XFTimeoutManager * interface::XFTimeoutManager::getInstance()
{
	return XFTimeoutManagerDefault::getInstance();
}

/**
 * @brief XFTimeoutManagerDefault::getInstance
 * Singleton pattern to get a unique instance of an XFTimeoutManager
 * @return An instance of XFTimeoutManagerDefault
 */
interface::XFTimeoutManager *XFTimeoutManagerDefault::getInstance()
{
    static interface::XFTimeoutManager* instance = nullptr;
    if (instance == nullptr){
        instance = new XFTimeoutManagerDefault();
    }
    return instance;
}

/**
 * @brief XFTimeoutManagerDefault::start
 * Start the timer
 */
void XFTimeoutManagerDefault::start()
{
    XF_startTimeoutManagerTimer(getTickInterval());
}

/**
 * @brief XFTimeoutManagerDefault::scheduleTimeout
 * Schedule a Timeout an put it in the list
 * @param timeoutId Id of the timeout
 * @param interval Interval in millisecond the timeout must pop
 * @param pReactive The pointer to the class to send the timeout
 */
void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive *pReactive)
{
    /// create tempTimout to insert in the list
    XFTimeout* tempTimeout = new XFTimeout(timeoutId, interval, pReactive);
    /// call addTimeout method
    addTimeout(tempTimeout);
}

/**
 * @brief XFTimeoutManagerDefault::unscheduleTimeout
 * Unschedule a timeout with it Id and it pReactive
 * @param timeoutId Id of the timeout
 * @param pReactive The pointer to the class to send the timeout
 */
void XFTimeoutManagerDefault::unscheduleTimeout(int32_t timeoutId, interface::XFReactive *pReactive)
{
    /// call removeTimeouts method
    removeTimeouts(timeoutId, pReactive);
}

/**
 * @brief XFTimeoutManagerDefault::tick
 * called by the callback method of a timer to decrement the first element of the list
 */
void XFTimeoutManagerDefault::tick()
{
    ///substract relative tick of the first element of the list if the list is not empty
    if(!_timeouts.empty()){
        _timeouts.front()->substractFromRelTicks(getTickInterval());
        /// the event is timeout
        while((!_timeouts.empty()) && (_timeouts.front()->getRelTicks() <= 0)){
            returnTimeout(_timeouts.front());
            _timeouts.pop_front();
         }
    }
}

/**
 * @brief XFTimeoutManagerDefault::addTimeout
 * add timeout in the list
 * @param pNewTimeout the new timeout to put inside the list
 */
void XFTimeoutManagerDefault::addTimeout(XFTimeout *pNewTimeout)
{
    /// if the timeout is the first in the list
    if(_timeouts.empty() == true){
        pNewTimeout->setRelTicks(pNewTimeout->getInterval());
        _timeouts.push_front(pNewTimeout);
    }
    /// another timeout already exist
    else{
        int relTickTot = 0;
        bool inserted = false;
        /// browse the list the find the correct position according to the relative tick
        _pMutex->lock();
        for(XFTimeout* timeout : _timeouts){
            relTickTot = relTickTot + timeout->getRelTicks();
            /// find the correct place to insert the new timeout
            if(!inserted && relTickTot > pNewTimeout->getInterval()){
                /// set relative tick of new timeout
                pNewTimeout->setRelTicks(pNewTimeout->getInterval()- (relTickTot - timeout->getRelTicks()));
                /// insert new timeout before the actual pointer of timeout
                auto it = std::find(_timeouts.begin(), _timeouts.end(), timeout);
                if (it != _timeouts.end()) {
                    _timeouts.insert(it, pNewTimeout);
                    inserted = true;
                }
                /// set the relative ticks of the next timeout
               if(inserted){
                    timeout->setRelTicks(timeout->getRelTicks()-pNewTimeout->getRelTicks());
               }
            }
        }
        _pMutex->unlock();
        /// the timeout was not inserted. it should be the last
        if(!inserted){
            pNewTimeout->setRelTicks(pNewTimeout->getInterval()-relTickTot);
            _timeouts.push_back(pNewTimeout);
        }
    }
}

/**
 * @brief XFTimeoutManagerDefault::removeTimeouts
 * Allow to remove a timeout of the list
 * @param timeoutId Id of the timeout to remove
 * @param pReactive pReactive of the timeout to remove
 */
void XFTimeoutManagerDefault::removeTimeouts(int32_t timeoutId, interface::XFReactive *pReactive)
{
    XFTimeout timeoutToRemove(timeoutId,0,pReactive);
    int removedRelTick = 0;
    bool removed = false;
    /// erase timeout according to it Id and it XFReactive
    _pMutex->lock();
    for(XFTimeout*  temp: _timeouts){
        /// find the timeout to remove
        if(*temp == timeoutToRemove){
            removedRelTick = temp->getRelTicks();
            _timeouts.remove(temp);
            delete temp;
            temp = nullptr;
            removed = true;
        }
       /// add relTick of the element removed in the list at the other element next to him
        if(removed && temp){
            temp->addToRelTicks(removedRelTick);
        }
    }
    _pMutex->unlock();
}

/**
 * @brief XFTimeoutManagerDefault::returnTimeout
 * return the timeout inside the queue of the dispatcher
 * @param pTimeout timeout to dispatch
 */
void XFTimeoutManagerDefault::returnTimeout(XFTimeout *pTimeout)
{
    pTimeout->getBehavior()->pushEvent(pTimeout);
}


#endif // USE_XF_TIMEOUTMANAGER_DEFAULT_IMPLEMENTATION


