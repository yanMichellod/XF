#include <assert.h>
#include <config/xf-config.h>

#if (USE_XF_DISPATCHER_DEFAULT_IMPLEMENTATION != 0)
#if (XF_TRACE_EVENT_PUSH_POP != 0)
    #include "trace/trace.h"
#endif // XF_TRACE_EVENT_PUSH_POP
#include "xf/eventstatus.h"
#include "xf/interface/timeoutmanager.h"
#include "xf/interface/reactive.h"
#include "xf/interface/resourcefactory.h"
#include "dispatcher-default.h"

using interface::XFTimeoutManager;
using interface::XFResourceFactory;

// TODO: Implement code for XFDispatcherDefault class
XFDispatcherDefault::XFDispatcherDefault():_events(){
	_bExecuting = false;
	_bInitialized = false;
	_pMutex = interface::XFResourceFactory::getInstance()->createMutex();
}
XFDispatcherDefault::~XFDispatcherDefault(){
	delete _pMutex;
}

void XFDispatcherDefault::initialize(){
	_bInitialized = true;
}

void XFDispatcherDefault::start(){
	_bExecuting = true;
}
void XFDispatcherDefault::stop(){
	_bExecuting = false;
}
void XFDispatcherDefault::pushEvent(XFEvent * pEvent){
	if(!_bInitialized){
		initialize();
	}
	_pMutex->lock();
	_events.push(pEvent);
	_pMutex->unlock();
}

void XFDispatcherDefault::scheduleTimeout(int timeoutId, int interval, interface::XFReactive * pReactive){
	interface::XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
}
void XFDispatcherDefault::unscheduleTimeout(int timeoutId, interface::XFReactive * pReactive){
	interface::XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
}

int XFDispatcherDefault::executeOnce(){
	if(!_events.empty()){
		dispatchEvent(_events.front());
	}
	return 1;
}
int XFDispatcherDefault::execute(const void * param){
	return 0;
}
void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const{
	XFEventStatus status = pEvent->getBehavior()->process(pEvent);
	if(status == XFEventStatus::Consumed){
		delete pEvent;
		pEvent = nullptr;
	}
	else if(status == XFEventStatus::Terminate){

	}
}


#endif // USE_XF_DISPATCHER_DEFAULT_IMPLEMENTATION
